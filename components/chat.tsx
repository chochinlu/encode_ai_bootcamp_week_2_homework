/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NYDyUGoHDaq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'

import { useState, useRef, useEffect } from 'react';
import { ChatMessage } from './ChatMessage';
import { ChatInput } from './ChatInput';
import ReactMarkdown from 'react-markdown';
import { AttachmentIcon, CloseIcon, MenuIcon } from './Icons';
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox"

interface Message {
  role: 'user' | 'assistant';
  content: string;
  imageUrl?: string;
}

export function Chat() {
  const [messages, setMessages] = useState<Message[]>([
    { role: 'assistant', content: 'Hello! What kind of joke would you like to hear?' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isThinking, setIsThinking] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [reminderMessage, setReminderMessage] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [temperature, setTemperature] = useState(1.00);
  const [jokeTypes, setJokeTypes] = useState({
    pun: true,
    knockKnock: true,
    story: true
  });

  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

  const handleFileAttachment = () => {
    if (!imageUrl) {
      fileInputRef.current?.click();
    }
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > MAX_FILE_SIZE) {
        setReminderMessage('File size cannot exceed 5MB.');
        return;
      }
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setImageUrl(reader.result as string);
          setReminderMessage(null); // Clear reminder message
        };
        reader.readAsDataURL(file);
      } else {
        setReminderMessage('Please upload only image files.');
      }
    }
    // If the file is not an image, we don't perform any action and don't display a warning
  }

  const handleRemoveImage = () => {
    setImageUrl(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() && !imageUrl) return;

    setReminderMessage(null); // Clear reminder message

    const newMessage: Message = {
      role: 'user',
      content: inputMessage,
      imageUrl: imageUrl || undefined
    };

    setMessages(prev => [...prev, newMessage]);
    setInputMessage('');
    setIsThinking(true);

    console.log('Sending message with imageUrl:', imageUrl ? imageUrl.substring(0, 50) + '...' : 'undefined');

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, newMessage],
          imageUrl,
          temperature,
          jokeTypes
        }),
      });

      if (!response.ok) {
        throw new Error('API request failed');
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('Failed to get response reader');
      }

      let aiResponse = '';
      setIsThinking(false);
      setMessages(prev => [...prev, { role: 'assistant', content: '' }]);

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const text = new TextDecoder().decode(value);
        aiResponse += text;

        setMessages(prev => {
          const newMessages = [...prev];
          newMessages[newMessages.length - 1].content = aiResponse;
          return newMessages;
        });
      }
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [...prev, { role: 'assistant', content: 'Sorry, an error occurred.' }]);
    } finally {
      setIsThinking(false);
      setImageUrl(null);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter') {
      if (e.ctrlKey) {
        setInputMessage(prev => prev + '\n');
      } else if (!e.shiftKey) {
        e.preventDefault();
        handleSendMessage();
      }
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const handleTemperatureChange = (value: number[]) => {
    setTemperature(value[0])
    // 這裡可以添加更新 OpenAI model temperature 的邏輯
  }

  const handleJokeTypeChange = (type: 'pun' | 'knockKnock' | 'story') => {
    setJokeTypes(prev => ({ ...prev, [type]: !prev[type] }));
  };

  return (
    <div className="flex min-h-screen w-full bg-gray-100">
      {/* Top bar for mobile devices */}
      <div className="md:hidden fixed top-0 left-0 right-0 bg-white border-b border-gray-300 p-4 z-10">
        <button onClick={toggleSidebar} className="text-gray-500 hover:text-gray-700">
          <MenuIcon className="w-6 h-6" />
        </button>
      </div>

      {/* Floating sidebar */}
      {isSidebarOpen && (
        <div className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-20" onClick={toggleSidebar}>
          <div className="w-64 h-full bg-white p-4 overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <h1 className="text-2xl font-bold text-gray-500">Joke Teller</h1>
            <div className="mt-4">
              <h2 className="text-lg font-semibold mb-2">Joke Types</h2>
              <div className="space-y-2">
                <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
                  <Checkbox
                    id="pun-mobile"
                    checked={jokeTypes.pun}
                    onCheckedChange={() => handleJokeTypeChange('pun')}
                    className="group-hover:border-blue-500 group-hover:text-blue-500"
                  />
                  <label
                    htmlFor="pun-mobile"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
                  >
                    Pun
                  </label>
                </div>
                <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
                  <Checkbox
                    id="knockKnock-mobile"
                    checked={jokeTypes.knockKnock}
                    onCheckedChange={() => handleJokeTypeChange('knockKnock')}
                    className="group-hover:border-blue-500 group-hover:text-blue-500"
                  />
                  <label
                    htmlFor="knockKnock-mobile"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
                  >
                    Knock-knock
                  </label>
                </div>
                <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
                  <Checkbox
                    id="story-mobile"
                    checked={jokeTypes.story}
                    onCheckedChange={() => handleJokeTypeChange('story')}
                    className="group-hover:border-blue-500 group-hover:text-blue-500"
                  />
                  <label
                    htmlFor="story-mobile"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
                  >
                    Story
                  </label>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <h2 className="text-lg font-semibold mb-2">Parameters</h2>
              <label className="text-sm font-medium text-gray-700">Temperature: {temperature.toFixed(2)}</label>
              <Slider
                defaultValue={[1.00]}
                max={2.00}
                min={0.00}
                step={0.01}
                onValueChange={handleTemperatureChange}
                className="mt-2"
              />
              <p className="text-xs text-red-400 mt-3">
                Warning: Setting temperature above 1.3 may result in incoherent or nonsensical responses.
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Desktop sidebar */}
      <div className="hidden md:block w-64 bg-white border-r border-gray-300 p-4 flex-shrink-0">
        <h1 className="text-2xl font-bold text-gray-500">Joke Teller</h1>
        <div className="mt-4">
          <h2 className="text-lg font-semibold mb-2">Joke Types</h2>
          <div className="space-y-2">
            <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
              <Checkbox
                id="pun"
                checked={jokeTypes.pun}
                onCheckedChange={() => handleJokeTypeChange('pun')}
                className="group-hover:border-blue-500 group-hover:text-blue-500"
              />
              <label
                htmlFor="pun"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
              >
                Pun
              </label>
            </div>
            <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
              <Checkbox
                id="knockKnock"
                checked={jokeTypes.knockKnock}
                onCheckedChange={() => handleJokeTypeChange('knockKnock')}
                className="group-hover:border-blue-500 group-hover:text-blue-500"
              />
              <label
                htmlFor="knockKnock"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
              >
                Knock-knock
              </label>
            </div>
            <div className="flex items-center space-x-2 group rounded-md cursor-pointer transition-all duration-200">
              <Checkbox
                id="story"
                checked={jokeTypes.story}
                onCheckedChange={() => handleJokeTypeChange('story')}
                className="group-hover:border-blue-500 group-hover:text-blue-500"
              />
              <label
                htmlFor="story"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-hover:text-blue-500 transition-colors duration-200 cursor-pointer flex-grow"
              >
                Story
              </label>
            </div>
          </div>
        </div>
        <div className="mt-4">
          <h2 className="text-lg font-semibold mb-2">Parameters</h2>
          <label className="text-sm font-medium text-gray-700">Temperature: {temperature.toFixed(2)}</label>
          <Slider
            defaultValue={[1.00]}
            max={2.00}
            min={0.00}
            step={0.01}
            onValueChange={handleTemperatureChange}
            className="mt-2"
          />
          <p className="text-xs text-red-400 mt-3">
            Warning: Setting temperature above 1.3 may result in incoherent or nonsensical responses.
          </p>
        </div>
      </div>

      {/* Main chat area */}
      <div className="flex-1 flex justify-center p-4 md:p-4 mt-14 md:mt-0">
        <div className="w-full max-w-[800px] flex flex-col bg-white border border-gray-400 rounded-lg overflow-hidden">
          <div className="flex-1 overflow-auto p-4 space-y-4">
            {messages.map((msg, index) => (
              <ChatMessage
                key={index}
                isAI={msg.role === 'assistant'}
                avatarFallback={msg.role === 'assistant' ? "AI" : "U"}
                message={
                  msg.role === 'assistant' ? (
                    <ReactMarkdown className="prose w-full max-w-none">
                      {msg.content}
                    </ReactMarkdown>
                  ) : (
                    msg.content
                  )
                }
                imageUrl={msg.imageUrl}
              />
            ))}
            {isThinking && (
              <ChatMessage
                isAI={true}
                avatarFallback="AI"
                message={<span className="thinking">Thinking...</span>}
              />
            )}
            <div ref={messagesEndRef} />
          </div>
          <div className="border-t p-2">
            <ChatInput
              inputMessage={inputMessage}
              setInputMessage={setInputMessage}
              handleKeyDown={handleKeyDown}
              imageUrl={imageUrl}
              handleFileAttachment={handleFileAttachment}
              handleSendMessage={handleSendMessage}
              handleRemoveImage={handleRemoveImage}
              AttachmentIcon={AttachmentIcon}
              CloseIcon={CloseIcon}
            />
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileChange}
              accept="image/*"
              style={{ display: 'none' }}
            />
          </div>
          {reminderMessage && (
            <div className="mt-2 text-sm text-red-500 px-2">
              {reminderMessage}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
